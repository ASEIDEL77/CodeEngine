#!/bin/bash

# Define our ICR Namespace env var for later use
ID=$(ibmcloud account show | grep "Account ID:" | sed "s/^.*:  *//")
ICR_NS=s2i-d-${ID:0:12}

# Clean up previous run
function clean() {
  set +x
  echo Cleaning...
  ibmcloud cr namespace-rm "${ICR_NS}" -f > /dev/null 2>&1 || true
  ibmcloud ce app delete -n s2i-dockerfile -f --wto=0 > /dev/null 2>&1 || true
  ibmcloud iam api-key-delete s2i-dapi -f > /dev/null 2>&1 || true
  ibmcloud ce registry delete -n s2i-dicr -f > /dev/null 2>&1 || true
  ibmcloud ce buildrun delete -n s2i-drun -f > /dev/null 2>&1 || true
  ibmcloud ce build delete -n s2i-dbuild -f > /dev/null 2>&1 || true
  rm -f out .ce-reg-secret || true
}

clean
[[ "$1" == "clean" ]] && exit 0

set -ex

# Create an ICR namespace to hold our new image
ibmcloud cr namespace-add $ICR_NS

# Create an apikey, put it in a registry secret. Used to push/pull image to ICR
ibmcloud iam api-key-create s2i-dapi | \
  grep "API Key" | sed 's/^.*Key  *//' | sed "s/ *$//" > .ce-reg-secret
ibmcloud ce registry create -n s2i-dicr -s us.icr.io -u iamapikey \
  --password-from-file .ce-reg-secret

# Define the build of this dir in this github repo
ibmcloud ce build create -n s2i-dbuild -i "us.icr.io/${ICR_NS}/app" --rs s2i-dicr \
  --source https://github.com/IBM/CodeEngine --context-dir s2i-dockerfile

# Now kick off the build itself
ibmcloud ce buildrun submit -n s2i-drun --build s2i-dbuild

# Wait for it to finish
while true ; do
  ibmcloud ce buildrun get -n s2i-drun > out
  grep Succeeded out && break
  grep "exited with" out && cat out && exit 1
  sleep 10
done

# Test the image we just built - deploy an app and 'curl' it
ibmcloud ce app create -n s2i-dockerfile --image "us.icr.io/${ICR_NS}/app" --rs s2i-dicr
URL=$(ibmcloud ce app get -n s2i-dockerfile -o jsonpath={.status.url})
curl -Ls "${URL}" | tee out

if ! grep "I was built"  out > /dev/null ; then
  echo "Missing expected outout"
  exit 1
fi

# Clean
clean
