#!/bin/bash

# This will run (w/o building) all demos in parallel

cd $(dirname $0)/..

echo "Cleaning..."
bin/clean > /dev/null 2>&1

set -e
(time (
  for file in `find . -name run | sort` ; do
    dir=`dirname $file`
    dir=${dir:2}  # remove leading ./

    # Skip this dir 'cause we're asked or if it's to be run sequentially
    [[ -e ${dir}/.SKIP ]] && echo "Skipping $dir " && continue
    [[ -e ${dir}/.SEQ ]] && echo "Delaying $dir " && continue

    # Only allow 5 at a time
    while (( $(jobs -rp | wc -l) > 4 )); do
      sleep 1
    done

    # Run the sample with whatever REGISTRY we're pointing to
    echo "Running $dir"
    (
      cd $dir
      if ./run "$@" > ../$dir.out 2>&1 ; then
        echo "PASS: $dir"
      else
        echo "FAIL: $dir ($dir.out)"
        echo FAIL > ../$dir.fail
      fi
    ) &
  done
  wait

  echo
  for file in `find . -name run | sort` ; do
    dir=`dirname $file`
    dir=${dir:2}  # remove leading ./

    # Only process samples that are meant to be run sequentially
    [[ ! -e ${dir}/.SEQ ]] && continue

    # Run the sample with whatever REGISTRY we're pointing to
    echo "Running $dir"
    (
      cd $dir
      if ./run "$@" > ../$dir.out 2>&1 ; then
        echo "PASS: $dir"
      else
        echo "FAIL: $dir ($dir.out)"
        echo FAIL > ../$dir.fail
      fi
    )
  done
  echo
)) 2>&1 | tee run-all.out

res="0"
for file in `find . -name run | sort` ; do
    dir=`dirname $file`
    dir=${dir:2}  # remove leading ./

    if [[ -e ${dir}.fail ]]; then
      rm ${dir}.fail
      res=1
      echo -e "\n### $dir\n" >> run-all.out
      tail ${dir}.out >> run-all.out
      echo >> run-all.out
    fi

    if [[ -e ${dir}.out ]]; then
      echo -e "\n### $dir\n"
      cat ${dir}.out
      rm ${dir}.out
    fi
done

echo
cat run-all.out
rm run-all.out
echo

if [[ "$res" == "0" ]]; then
  echo "PASSED"
else
  echo "FAILED!"
  exit 1
fi
