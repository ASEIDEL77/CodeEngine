#!/bin/bash

# This will run (w/o building) all demos in parallel

cd $(dirname $0)/..

set -e
(time (
  for file in `find . -name run | sort` ; do
    dir=`dirname $file`
	dir=${dir:2}  # remove leading ./

    # Skip this dir 'cause we're asked or if it's to be run sequentially
    [[ -e ${dir}/.SKIP ]] && echo "Skipping $dir " && continue
    [[ -e ${dir}/.SEQ ]] && echo "Delaying $dir " && continue

    # Run the sample with whatever REPOSITORY we're pointing to
    echo "Running $dir"
    (
      cd $dir
      if ./run "$@" > ../$dir.out 2>&1 ; then
        echo "PASS: $dir"
      else
        echo "FAIL: $dir ($dir.out)"
		echo FAIL > ../$dir.fail
      fi
    ) &
  done
  wait

  echo
  for file in `find . -name run | sort` ; do
    dir=`dirname $file`
	dir=${dir:2}  # remove leading ./

    # Only process samples that are meant to be run sequentially
    [[ ! -e ${dir}/.SEQ ]] && continue

    # Run the sample with whatever REPOSITORY we're pointing to
    echo "Running $dir"
    (
      cd $dir
      if ./run "$@" > ../$dir.out 2>&1 ; then
        echo "PASS: $dir"
      else
        echo "FAIL: $dir ($dir.out)"
		echo FAIL > ../$dir.fail
      fi
    )
  done
)) 2>&1 | tee run-all.out

res=0
for file in `find . -name run | sort` ; do
    dir=`dirname $file`
	dir=${dir:2}  # remove leading ./

	if [[ -e ${dir}.out ]]; then
	  echo -e "\n### $dir\n"
	  cat ${dir}.out
	  rm ${dir}.out
	fi

    if [[ -e ${dir}.fail ]]; then
	  rm ${dir}.fail
	  res=1
	fi
done

echo
cat run-all.out
rm run-all.out
echo

if [[ "$rc" == "0" ]]; then
  echo "PASSED"
else
  echo "FAILED!"
  exit 1
fi
